
OSM OPL ("Object Per Line") Format
==================================

This format was created to allow easy access to and manipulation of OSM data
with typical UNIX command line tools such as 'grep', 'sed', and 'awk'. This can
make some ad-hoc OSM data manipulation easy to do, but is probably not as fast
as some specialized tool. But it beats grepping in XML files...

OPL files are only about half the size of OSM XML files, but when compressed
they are about the same size.

**
**  This format is preliminary, it might change. Please send feedback if
**  you use this format!
**

File Format
-----------

Each line of the file contains one OSM object (a node, way, or relation) or an
OSM changeset. Fields are separated by a space character, lines by a newline
character. Fields always appear in the same order and are always present, each
field is introduced by a specific character:

One of these fields is always the first:
n - Node ID (nodes only)
w - Way ID (ways only)
r - Relation ID (relations only)
c - Changeset ID (changesets only)

Then for OSM objects in the given order:
v - Version
d - Deleted flag ('V' - visible or 'D' - deleted)
c - Changeset ID
t - Timestamp (ISO Format)
i - User ID
u - Username
T - Tags
x - Longitude (nodes only)
y - Latitude (nodes only)
N - Nodes (ways only)
M - Members (relations only)

The N,M, and T fields can be empty. If the user is anonymous, the 'User ID'
will be 0 and the 'Username' field will be empty: "... i0 u ...". If the
node is deleted, the 'Longitude' and 'Latitude' fields are empty. All other
fields always contain data.

The 'Deleted flag' shows whether an object version has been deleted ("dD") or
whether it is visible ("dV"). For normal OSM data files this is always "dV",
but change files and osm history files can contain deleted objects.

For changesets the fields are different:
k - num_changes
s - created_at (start) timestamp (ISO Format)
e - closed_at (end) timestamp (ISO Format)
i - User ID
u - Username
x - Longitude (left bottom corner, min_lon)
y - Latitude (left bottom corner, min_lat)
X - Longitude (right top corner, max_lon)
Y - Latitude (right top corner, max_lat)
T - Tags

The fields e is empty when the changeset is not closed yet. The fields x, y, X,
Y can be empty when no bounding box could be derived. The field k can be 0.


Escaping
--------

User names, tags, and relation member roles can contain any valid Unicode
character. Any characters that have special meaning in OPL files (' ' (space),
',' (comma), '=' (equals) and '@') have to be escaped as well as any
non-printing characters.

Escaped characters are written as '%xxxx', ie a percent sign followed by the
4-digit hex code of the Unicode code point.

Currently there is a hard-coded list in the code of all the characters that
don't need escaping. This list is incomplete and subject to change.


Format Overview
---------------

NODE:
    n(OBJECT_ID) v(VERSION) d(V|D) c(CHANGESET_ID) t(yyyy-mm-ddThh:mm:ssZ) i(USER_ID) u(USERNAME) T(TAGS) x(LONGITUDE) y(LATITUDE)

WAY:
    w(OBJECT_ID) v(VERSION) d(V|D) c(CHANGESET_ID) t(yyyy-mm-ddThh:mm:ssZ) i(USER_ID) u(USERNAME) T(TAGS) N(WAY_NODES)

RELATION:
    r(OBJECT_ID) v(VERSION) d(V|D) c(CHANGESET_ID) t(yyyy-mm-ddThh:mm:ssZ) i(USER_ID) u(USERNAME) T(TAGS) M(MEMBERS)

CHANGESET:
    c(CHANGESET_ID) k(NUM_CHANGES) s(yyyy-mm-ddThh:mm:ssZ) e(yyyy-mm-ddThh:mm:ssZ) i(USER_ID) u(USERNAME) x(LONGITUDE) y(LATITUDE) X(LONGITUDE) Y(LATITUDE) T(TAGS)

TAGS
    (KEY)=(VALUE),...

WAY_NODES:
    n(NODE_REF),...

MEMBERS:
    [nwr](MEMBER_REF)@(MEMBER_ROLE),...


Creating OPL files
------------------

The osmium_convert program provided in the examples directory can be used to
convert OSM files into the OPL format:

  osmium_convert berlin.osm.pbf berlin.osm.opl

There is currently no way to convert OPL files back into OSM XML or PBF files.


Examples
--------

(Note that some of these commands generate quite a lot of output. You might
want to add a "| less" or redirect into a file. For larger OSM files some of
these commands might take quite a while, so try them out on small files first.)

Find all objects tagged highway=...:

  egrep "( T|,)highway=" data.osm.opl

Find all IDs of ways tagged highway=...:

  egrep '^w' data.osm.opl | egrep "( T|,)highway=" | cut -d' ' -f1 | cut -c2-

Find all nodes with version > 9:

  egrep '^n' data.osm.opl | egrep -v ' v. '

Find the first fields of the relation with the highest version number:

  egrep '^r' data.osm.opl | sort -b -n -k 2.2,2 | tail -1 | cut -d' ' -f1-7

Find all objects with changeset ID 123:

  egrep ' c123 ' data.osm.opl

Count how many objects were created in each hour of the day:

  egrep ' v1 ' data.osm.opl | cut -d' ' -f5 | cut -dT -f2 | cut -d: -f1 | sort | uniq -c

Find all closed ways:

  egrep '^w' data.osm.opl | egrep 'N(n[0-9]+),.*\1 '

Find all ways tagged with 'area=yes' that are not closed:

  egrep '^w' data.osm.opl | egrep 'area=yes' | egrep -v 'N(n[0-9]+),.*\1 '

Find all users who have created post boxes:

  egrep ' v1 ' data.osm.opl | egrep 'amenity=post_box' | cut -d' ' -f7 | cut -c2- | sort -u

Find all node IDs used in 'via' roles in relations:

  egrep '^r' data.osm.opl | sed -e 's/^.* M\(.*\) .*$/\1/' | egrep '@via[, ]' | sed -e 's/,/\n/g' | egrep '^n.*@via$' | cut -d@ -f1 | cut -c2- | sort -nu

Find all nodes having any tags igoring 'created_by' tags:

  egrep '^n' data.osm.opl | egrep -v ' T$' | sed -e 's/\( T\|,\)created_by=[^,]\+\(,\|$\)/\1/' | egrep -v ' T$'

Count tag key usage:

  sed -e 's/^.* T//' data.osm.opl | egrep -v '^$' | sed -e 's/,/\n/g' | cut -d= -f1 | sort | uniq -c | sort -nr

Order by object type, object id and version (ie the usual order for OSM files):

  sed -e 's/^r/z/' data.osm.opl | sort -b -k1.1,1.1 -k1.2,1n -k2.2,2n | sed -e 's/^z/r/'

Create statistics on number of nodes in ways:

  egrep '^w' data.osm.opl | cut -d' ' -f9 | tr -dc 'n\n' | awk '{a[length]++} END {for(i=1;i<=2000;++i) { print i, a[i] ? a[i] : 0 } }'

