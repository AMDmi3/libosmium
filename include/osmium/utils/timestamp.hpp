#ifndef OSMIUM_UTILS_TIMESTAMP_HPP
#define OSMIUM_UTILS_TIMESTAMP_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <ctime>
#include <stdexcept>
#include <string>

namespace osmium {

    /**
     * Contains some helper functions to convert timestamps from time_t to
     * the ISO format used by OSM and back.
     */
    namespace timestamp {

        namespace {

            static const int timestamp_length = 20 + 1; // length of ISO timestamp string yyyy-mm-ddThh:mm:ssZ\0

            /**
            * The timestamp format for OSM timestamps in strftime(3) format.
            * This is the ISO-Format yyyy-mm-ddThh:mm:ssZ
            */
            inline const char* timestamp_format() {
                static const char f[] = "%Y-%m-%dT%H:%M:%SZ";
                return f;
            }
        }

        /**
         * Return UTC Unix time as string in ISO date/time format.
         */
        inline std::string to_iso(time_t timestamp) {
            if (timestamp == 0) {
                return std::string("");
            }
            struct tm* tm = std::gmtime(&timestamp);
            std::string s(timestamp_length, '\0');
            /* This const_cast is ok, because we know we have enough space
               in the string for the format we are using (well at least until
               the year will have 5 digits). And by setting the size
               afterwards from the result of strftime we make sure thats set
               right, too. */
            s.resize(strftime(const_cast<char*>(s.c_str()), timestamp_length, timestamp_format(), tm));
            return s;
        }

        /**
         * Parse ISO date/time string and return UTC unix time.
         * Throws std::invalid_argument, if the timestamp can not be parsed.
         */
        inline time_t parse_iso(const char* timestamp) {
#ifndef WIN32
            struct tm tm = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            if (strptime(timestamp, timestamp_format(), &tm) == NULL) {
                throw std::invalid_argument("can't parse timestamp");
            }
            return timegm(&tm);
#else
            struct tm tm;
            int n = sscanf(timestamp, "%4d-%2d-%2dT%2d:%2d:%2dZ", &tm.tm_year, &tm.tm_mon, &tm.tm_mday, &tm.tm_hour, &tm.tm_min, &tm.tm_sec);
            if (n != 6) {
                throw std::invalid_argument("can't parse timestamp");
            }
            tm.tm_year -= 1900;
            tm.tm_mon--;
            tm.tm_wday = 0;
            tm.tm_yday = 0;
            tm.tm_isdst = 0;
            return _mkgmtime(&tm);
#endif
        }

    } // namespace timestamp

} // namespace osmium

#endif // OSMIUM_UTILS_TIMESTAMP_HPP
