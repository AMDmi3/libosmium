#ifndef OSMIUM_HANDLER_HPP
#define OSMIUM_HANDLER_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <osmium/osm.hpp>
#include <osmium/memory/buffer.hpp>

namespace osmium {

    namespace handler {

        namespace {

            template <typename T, typename U>
            using MaybeConst = typename std::conditional<std::is_const<typename T::value_type>::value, typename std::add_const<U>::type, U>::type;

            template <class THandler>
            inline void call_before_and_after(THandler& handler, osmium::item_type last, osmium::item_type current) {
                switch (last) {
                    case osmium::item_type::undefined:
                        handler.init();
                        break;
                    case osmium::item_type::node:
                        handler.after_nodes();
                        break;
                    case osmium::item_type::way:
                        handler.after_ways();
                        break;
                    case osmium::item_type::relation:
                        handler.after_relations();
                        break;
                    default:
                        break;
                }
                switch (current) {
                    case osmium::item_type::undefined:
                        handler.done();
                        break;
                    case osmium::item_type::node:
                        handler.before_nodes();
                        break;
                    case osmium::item_type::way:
                        handler.before_ways();
                        break;
                    case osmium::item_type::relation:
                        handler.before_relations();
                        break;
                    default:
                        break;
                }
            }

            template <class THandler, typename TIterator>
            inline osmium::item_type apply_handler(THandler& handler, const TIterator& begin, const TIterator& end, osmium::item_type last_type = osmium::item_type::undefined, bool before_after = false) {
                for (auto it = begin; it != end; ++it) {
                    if (before_after && last_type != it->type()) {
                        call_before_and_after(handler, last_type, it->type());
                        last_type = it->type();
                    }
                    switch (it->type()) {
                        case osmium::item_type::node:
                            handler.node(static_cast<MaybeConst<TIterator, osmium::Node>&>(*it));
                            break;
                        case osmium::item_type::way:
                            handler.way(static_cast<MaybeConst<TIterator, osmium::Way>&>(*it));
                            break;
                        case osmium::item_type::relation:
                            handler.relation(static_cast<MaybeConst<TIterator, osmium::Relation>&>(*it));
                            break;
                        case osmium::item_type::changeset:
                            handler.changeset(static_cast<MaybeConst<TIterator, osmium::Changeset>&>(*it));
                            break;
#if 0
                        case osmium::item_type::tag_list:
                            handler.tag_list(static_cast<MaybeConst<TIterator, osmium::TagList>&>(*it));
                            break;
                        case osmium::item_type::way_node_list:
                            handler.way_node_list(static_cast<MaybeConst<TIterator, osmium::WayNodeList>&>(*it));
                            break;
                        case osmium::item_type::way_node_with_location_list:
                            handler.way_node_with_location_list(static_cast<MaybeConst<TIterator, osmium::WayNodeWithLocationList>&>(*it));
                            break;
                        case osmium::item_type::relation_member_list:
                        case osmium::item_type::relation_member_list_with_full_members:
                            handler.relation_member_list(static_cast<MaybeConst<TIterator, osmium::RelationMemberList>&>(*it));
                            break;
#endif
                        default:
                            throw std::runtime_error("unknown type");
                    }
                }
                return last_type;
            }

        } // anonymous namespace

        template <class THandler>
        class Handler {

        public:

            void node(const osmium::Node&) const {
            }

            void way(const osmium::Way&) const {
            }

            void relation(const osmium::Relation&) const {
            }

            void changeset(const osmium::Changeset&) const {
            }

#if 0
            void tag_list(const osmium::TagList&) const {
            }

            void way_node_list(const osmium::WayNodeList&) const {
            }

            void way_node_with_location_list(const osmium::WayNodeWithLocationList&) const {
            }

            void relation_member_list(const osmium::RelationMemberList&) const {
            }
#endif
            void init() const {
            }

            void before_nodes() const {
            }

            void after_nodes() const {
            }

            void before_ways() const {
            }

            void after_ways() const {
            }

            void before_relations() const {
            }

            void after_relations() const {
            }

            void done() const {
            }

            osmium::item_type operator()(const osmium::memory::Buffer& buffer) {
                return operator()(buffer.cbegin(), buffer.cend());
            }

            osmium::item_type operator()(osmium::memory::Buffer& buffer) {
                return operator()(buffer.begin(), buffer.end());
            }


            osmium::item_type operator()(const osmium::memory::Buffer& buffer, const osmium::item_type type) {
                return operator()(buffer.cbegin(), buffer.cend(), type);
            }

            osmium::item_type operator()(osmium::memory::Buffer& buffer, const osmium::item_type type) {
                return operator()(buffer.begin(), buffer.end(), type);
            }


            osmium::item_type operator()(const osmium::memory::Buffer::const_iterator& begin, const osmium::memory::Buffer::const_iterator& end) {
                return apply_handler(*static_cast<THandler*>(this), begin, end);
            }

            osmium::item_type operator()(const osmium::memory::Buffer::iterator& begin, const osmium::memory::Buffer::iterator& end) {
                return apply_handler(*static_cast<THandler*>(this), begin, end);
            }


            osmium::item_type operator()(const osmium::memory::Buffer::const_iterator& begin, const osmium::memory::Buffer::const_iterator& end, const osmium::item_type type) {
                return apply_handler(*static_cast<THandler*>(this), begin, end, type, true);
            }

            osmium::item_type operator()(const osmium::memory::Buffer::iterator& begin, const osmium::memory::Buffer::iterator& end, const osmium::item_type type) {
                return apply_handler(*static_cast<THandler*>(this), begin, end, type, true);
            }


            void operator()(const osmium::item_type type) {
                call_before_and_after(*static_cast<THandler*>(this), type, osmium::item_type::undefined);
            }

        }; // class Handler

    } // namspace handler

} // namespace osmium

#endif // OSMIUM_HANDLER_HPP
