#ifndef OSMIUM_INDEX_NODE_LOCATIONS_MAP_HPP
#define OSMIUM_INDEX_NODE_LOCATIONS_MAP_HPP

/*

This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013-2015 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

namespace {

#ifdef OSMIUM_HAS_INDEX_MAP_STL_MAP
    const bool registered_index_map_stl_map = osmium::index::MapFactory<osmium::unsigned_object_id_type, osmium::Location>::instance().register_map("stl_map", [](const std::vector<std::string>&) {
        return new osmium::index::map::StlMap<osmium::unsigned_object_id_type, osmium::Location>();
    });
#endif // OSMIUM_HAS_INDEX_MAP_STL_MAP

#ifdef OSMIUM_HAS_INDEX_MAP_SPARSE_TABLE
    const bool registered_index_map_sparse_table = osmium::index::MapFactory<osmium::unsigned_object_id_type, osmium::Location>::instance().register_map("sparse_table", [](const std::vector<std::string>&) {
        return new osmium::index::map::SparseTable<osmium::unsigned_object_id_type, osmium::Location>();
    });
#endif // OSMIUM_HAS_INDEX_MAP_SPARSE_TABLE

#ifdef OSMIUM_HAS_INDEX_MAP_SPARSE_MAP_MEM
    const bool registered_index_map_sparse_map_mem = osmium::index::MapFactory<osmium::unsigned_object_id_type, osmium::Location>::instance().register_map("sparse_map_mem", [](const std::vector<std::string>&) {
        return new osmium::index::map::SparseMapMem<osmium::unsigned_object_id_type, osmium::Location>();
    });
#endif // OSMIUM_HAS_INDEX_MAP_SPARSE_MAP_MEM

#ifdef OSMIUM_HAS_INDEX_MAP_DENSE_MAP_MEM
    const bool registered_index_map_dense_map_mem = osmium::index::MapFactory<osmium::unsigned_object_id_type, osmium::Location>::instance().register_map("dense_map_mem", [](const std::vector<std::string>&) {
        return new osmium::index::map::DenseMapMem<osmium::unsigned_object_id_type, osmium::Location>();
    });
#endif // OSMIUM_HAS_INDEX_MAP_DENSE_MAP_MEM

#ifdef OSMIUM_HAS_INDEX_MAP_SPARSE_MAP_MMAP
    const bool registered_index_map_sparse_map_mmap = osmium::index::MapFactory<osmium::unsigned_object_id_type, osmium::Location>::instance().register_map("sparse_map_mmap", [](const std::vector<std::string>&) {
        return new osmium::index::map::SparseMapMmap<osmium::unsigned_object_id_type, osmium::Location>();
    });
#endif // OSMIUM_HAS_INDEX_MAP_SPARSE_MAP_MMAP

#ifdef OSMIUM_HAS_INDEX_MAP_DENSE_MAP_MMAP
    const bool registered_index_map_dense_map_mmap = osmium::index::MapFactory<osmium::unsigned_object_id_type, osmium::Location>::instance().register_map("dense_map_mmap", [](const std::vector<std::string>&) {
        return new osmium::index::map::DenseMapMmap<osmium::unsigned_object_id_type, osmium::Location>();
    });
#endif // OSMIUM_HAS_INDEX_MAP_DENSE_MAP_MMAP

#ifdef OSMIUM_HAS_INDEX_MAP_SPARSE_MAP_FILE
    const bool registered_index_map_sparse_map_file = osmium::index::MapFactory<osmium::unsigned_object_id_type, osmium::Location>::instance().register_map("sparse_map_file", [](const std::vector<std::string>& config) {
        if (config.size() == 1) {
            return new osmium::index::map::SparseMapFile<osmium::unsigned_object_id_type, osmium::Location>();
        } else {
            assert(config.size() > 1);
            const std::string& filename = config[1];
            int fd = ::open(filename.c_str(), O_CREAT | O_RDWR, 0644);
            if (fd == -1) {
                throw std::runtime_error(std::string("can't open file '") + filename + "': " + strerror(errno));
            }
            return new osmium::index::map::SparseMapFile<osmium::unsigned_object_id_type, osmium::Location>(fd);
        }
    });
#endif // OSMIUM_HAS_INDEX_MAP_SPARSE_MAP_FILE

#ifdef OSMIUM_HAS_INDEX_MAP_DENSE_MAP_FILE
    const bool registered_index_map_dense_map_file = osmium::index::MapFactory<osmium::unsigned_object_id_type, osmium::Location>::instance().register_map("dense_map_file", [](const std::vector<std::string>& config) {
        if (config.size() == 1) {
            return new osmium::index::map::DenseMapFile<osmium::unsigned_object_id_type, osmium::Location>();
        } else {
            assert(config.size() > 1);
            const std::string& filename = config[1];
            int fd = ::open(filename.c_str(), O_CREAT | O_RDWR, 0644);
            if (fd == -1) {
                throw std::runtime_error(std::string("can't open file '") + filename + "': " + strerror(errno));
            }
            return new osmium::index::map::DenseMapFile<osmium::unsigned_object_id_type, osmium::Location>(fd);
        }
    });
#endif // OSMIUM_HAS_INDEX_MAP_DENSE_MAP_FILE

} // anonymous namespace

#endif // OSMIUM_INDEX_NODE_LOCATIONS_MAP_HPP
