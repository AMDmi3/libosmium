#ifndef OSMIUM_INDEX_ID_SET_HPP
#define OSMIUM_INDEX_ID_SET_HPP

/*

This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013-2016 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <algorithm>
#include <cstring>
#include <memory>
#include <type_traits>
#include <unordered_set>
#include <vector>

namespace osmium {

    namespace index {

        /**
         * A set of Ids of the given type. Internal storage is in chunks of
         * arrays used as bit fields.
         *
         * Elements can never be removed from the the set, you can only clear
         * the whole set at once.
         */
        template <typename T>
        class IdSet {

            static_assert(std::is_unsigned<T>::value, "Needs unsigned type");
            static_assert(sizeof(T) >= 4, "Needs at least 32bit type");

            constexpr static const size_t chunk_bits = 26;
            constexpr static const size_t chunk_size = 1 << chunk_bits;

            std::vector<std::unique_ptr<unsigned char[]>> m_data;

            static size_t chunk(T id) {
                return id >> (chunk_bits + 3);
            }

            static size_t offset(T id) {
                return (id >> 3) & ((1 << chunk_bits) - 1);
            }

            static unsigned char bitmask(T id) {
                return 1 << (id & 0x7);
            }

        public:

            IdSet() = default;

            void set(T id) {
                const auto c = chunk(id);
                if (c >= m_data.size()) {
                    m_data.resize(c+1);
                }

                if (!m_data[c]) {
                    m_data[c].reset(new unsigned char[chunk_size]);
                    ::memset(m_data[c].get(), 0, chunk_size);
                }

                auto* r = m_data[c].get();
                r[offset(id)] |= bitmask(id);
            }

            bool get(T id) const noexcept {
                if (chunk(id) >= m_data.size()) {
                    return false;
                }
                auto* r = m_data[chunk(id)].get();
                if (!r) {
                    return false;
                }
                return (r[offset(id)] & bitmask(id)) != 0;
            }

            bool empty() const noexcept {
                return m_data.empty();
            }

            void clear() {
                m_data.clear();
            }

        }; // class IdSet

    } // namespace index

} // namespace osmium

#endif // OSMIUM_INDEX_ID_SET_HPP
