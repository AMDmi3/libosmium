#ifndef OSMIUM_INDEX_MAP_FIXED_ARRAY_HPP
#define OSMIUM_INDEX_MAP_FIXED_ARRAY_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <cstdlib>
#include <new>

#include <osmium/index/map.hpp>

namespace osmium {

    namespace index {

        namespace map {

            /**
            * The FixedArray storage stores location in a huge array. The size of
            * the array is given when initializing the object, it must be large
            * enough to hold all items.
            *
            * Only use this store when you know beforehand how many IDs there are.
            * It is mainly provided for cases where the more flexible Mmap storage
            * class does not work.
            *
            * There is no range checking on accessing the store.
            *
            * If you are storing node coordinates, you'll need 8 bytes for each node.
            * At the time of writing this, the largest node ID is about 1.3 billion,
            * so you'll need about 10 GB of memory.
            *
            * Note that this storage class will only work on 64 bit systems if
            * used for storing node coordinates. 32 bit systems just can't address
            * that much memory!
            */
            template <typename TValue>
            class FixedArray : public osmium::index::map::Map<TValue> {

                uint64_t m_size;

                TValue* m_items;

            public:

                /**
                * Constructor.
                *
                * @param max_id One larger than the largest ID you will ever have.
                * @exception std::bad_alloc Thrown when there is not enough memory.
                */
                FixedArray(const uint64_t max_id) :
                    Map<TValue>(),
                    m_size(max_id) {
                    m_items = static_cast<TValue*>(malloc(sizeof(TValue) * max_id));
                    if (!m_items) {
                        throw std::bad_alloc();
                    }
                }

                ~FixedArray() {
                    clear();
                }

                void set(const uint64_t id, const TValue value) {
                    m_items[id] = value;
                }

                const TValue operator[](const uint64_t id) const {
                    return m_items[id];
                }

                uint64_t size() const {
                    return m_size;
                }

                uint64_t used_memory() const {
                    return m_size * sizeof(TValue);
                }

                void clear() {
                    free(m_items);
                    m_items = NULL;
                }

            }; // class FixedArray

        } // namespace map

    } // namespace index

} // namespace osmium

#endif // OSMIUM_INDEX_MAP_FIXED_ARRAY_HPP
