#ifndef OSMIUM_INDEX_MAP_SPARSE_TABLE_HPP
#define OSMIUM_INDEX_MAP_SPARSE_TABLE_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <google/sparsetable>

#include <osmium/index/map.hpp>

namespace osmium {

    namespace index {

        namespace map {

            /**
            * The SparseTable store stores items in a Google sparsetable,
            * a data structure that can hold sparsly filled tables in a
            * very space efficient way. It will resize automatically.
            *
            * Use this node location store if the ID space is only sparsly
            * populated, such as when working with smaller OSM files (like
            * country extracts).
            */
            template <typename TValue>
            class SparseTable : public osmium::index::map::Map<TValue> {

                uint64_t m_grow_size;

                google::sparsetable<TValue> m_items;

            public:

                /**
                * Constructor.
                *
                * @param grow_size The initial size of the storage (in items).
                *                  The storage will grow by at least this size
                *                  every time it runs out of space.
                */
                SparseTable(const uint64_t grow_size=10000) :
                    Map<TValue>(),
                    m_grow_size(grow_size),
                    m_items(grow_size) {
                }

                void set(const uint64_t id, const TValue value) {
                    if (id >= m_items.size()) {
                        m_items.resize(id + m_grow_size);
                    }
                    m_items[id] = value;
                }

                const TValue operator[](const uint64_t id) const {
                    return m_items[id];
                }

                uint64_t size() const {
                    return m_items.size();
                }

                uint64_t used_memory() const {
                    // unused items use 1 bit, used items sizeof(TValue) bytes
                    // http://google-sparsehash.googlecode.com/svn/trunk/doc/sparsetable.html
                    return (m_items.size() / 8) + (m_items.num_nonempty() * sizeof(TValue));
                }

                void clear() {
                    m_items.clear();
                }

            }; // class SparseTable

        } // namespace map

    } // namespace index

} // namespace osmium

#endif // OSMIUM_INDEX_BYID_SPARSE_TABLE_HPP
