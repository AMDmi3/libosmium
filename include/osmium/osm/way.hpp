#ifndef OSMIUM_OSM_WAY_HPP
#define OSMIUM_OSM_WAY_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <osmium/osm/object.hpp>

namespace osmium {

    class WayNodeRefOnly : public osmium::memory::detail::ItemHelper {

        object_id_type m_ref;

        template <class TMember>
        friend class osmium::memory::CollectionIterator;

        char* next() {
            return data() + sizeof(WayNodeRefOnly);
        }

        const char* next() const {
            return data() + sizeof(WayNodeRefOnly);
        }

    public:

        WayNodeRefOnly(const object_id_type ref=0) :
            m_ref(ref) {
        }

        object_id_type ref() const {
            return m_ref;
        }

        unsigned_object_id_type positive_ref() const {
            return std::abs(m_ref);
        }

    }; // class WayNodeRefOnly

    inline bool operator<(const WayNodeRefOnly& lhs, const WayNodeRefOnly& rhs) {
        return lhs.ref() < rhs.ref();
    }

    inline bool operator>(const WayNodeRefOnly& lhs, const WayNodeRefOnly& rhs) {
        return lhs.ref() > rhs.ref();
    }

    inline bool operator<=(const WayNodeRefOnly& lhs, const WayNodeRefOnly& rhs) {
        return lhs.ref() <= rhs.ref();
    }

    inline bool operator>=(const WayNodeRefOnly& lhs, const WayNodeRefOnly& rhs) {
        return lhs.ref() >= rhs.ref();
    }

    inline bool operator==(const WayNodeRefOnly& lhs, const WayNodeRefOnly& rhs) {
        return lhs.ref() == rhs.ref();
    }

    inline bool operator!=(const WayNodeRefOnly& lhs, const WayNodeRefOnly& rhs) {
        return !(lhs == rhs);
    }

    class WayNodeWithLocation : public WayNodeRefOnly {

        Location m_location;

        template <class TMember>
        friend class osmium::memory::CollectionIterator;

        char* next() {
            return data() + sizeof(WayNodeWithLocation);
        }

        const char* next() const {
            return data() + sizeof(WayNodeWithLocation);
        }

    public:

        static constexpr osmium::item_type collection_type = osmium::item_type::way_node_list;

        WayNodeWithLocation(const object_id_type ref=0, const Location& location=Location()) :
            WayNodeRefOnly(ref),
            m_location(location) {
        }

        Location location() const {
            return m_location;
        }

        void location(const Location& location) {
            m_location = location;
        }

    }; // class WayNodeWithLocation

    typedef WayNodeWithLocation WayNode;

    class WayNodeList : public osmium::memory::Collection<WayNode> {

    public:

        static constexpr osmium::item_type itemtype = osmium::item_type::way_node_list;

        WayNodeList():
            osmium::memory::Collection<WayNode>() {
        }

    }; // class WayNodeList


    class Way : public Object {

        friend class osmium::memory::ObjectBuilder<osmium::Way>;

        Way() :
            Object(sizeof(Way), osmium::item_type::way) {
        }

    public:

        static constexpr osmium::item_type itemtype = osmium::item_type::way;

        WayNodeList& nodes() {
            return subitem_of_type<WayNodeList>();
        }

        const WayNodeList& nodes() const {
            return subitem_of_type<const WayNodeList>();
        }

        /**
         * Update all nodes in a way with the ID of the given WayNode with the
         * location of the given WayNode.
         */
        void update_node_location(const WayNode& new_wn) {
            for (auto& wn : nodes()) {
                if (wn.ref() == new_wn.ref()) {
                    wn.location(new_wn.location());
                }
            }
        }

    }; // class Way

    static_assert(sizeof(Way) % osmium::memory::align_bytes == 0, "Class osmium::Way has wrong size to be aligned properly!");

} // namespace osmium

#endif // OSMIUM_OSM_WAY_HPP
