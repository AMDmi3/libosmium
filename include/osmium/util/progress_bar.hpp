#ifndef OSMIUM_UTIL_PROGRESS_BAR_HPP
#define OSMIUM_UTIL_PROGRESS_BAR_HPP

/*

This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013-2016 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <iostream>

namespace osmium {

    /**
     * Displays a progress bar on STDERR. Can be used together with the
     * osmium::io::Reader class for instance.
     */
    class ProgressBar {

        static const char* bar() noexcept {
            return "======================================================================";
        }

        static const char* spc() noexcept {
            return "                                                                     ";
        }

        static constexpr const size_t length = 70;

        size_t m_max_size;
        size_t m_prev_percent = 100 + 1;
        bool m_enable;
        bool m_do_cleanup = true;

    public:

        /**
         * Initializes the progress bar. No output yet.
         *
         * @param max_size Max size equivalent to 100%.
         * @param enable Set to false to disable (for instance if stderr is
         *               not a TTY).
         */
        explicit ProgressBar(size_t max_size, bool enable) noexcept :
            m_max_size(max_size),
            m_enable(max_size > 0 && enable) {
        }

        ~ProgressBar() {
            if (m_do_cleanup) {
                done();
            }
        }

        /**
         * Call this function to update the progress bar. Actual update will
         * only happen if the percentage changed from the last time this
         * function was called.
         *
         * @param current_size Current size. Used together with the max_size
         *                     from constructor to calculate the percentage.
         */
        void update(size_t current_size) {
            if (!m_enable) {
                return;
            }

            const size_t percent = 100 * current_size / m_max_size;
            if (m_prev_percent == percent) {
                return;
            }
            m_prev_percent = percent;

            const size_t num = percent * (length / 100.0);
            std::cerr << '[';
            if (num >= length) {
                std::cerr << bar();
            } else {
                std::cerr << (bar() + length - num) << '>' << (spc() + num);
            }
            std::cerr << "] ";
            if (percent < 10) {
                std::cerr << ' ';
            }
            if (percent < 100) {
                std::cerr << ' ';
            }
            std::cerr << percent << "% \r";
        }

        /**
         * Call this at the end. Will update the progress bar to 100% and
         * print a final line feed. If this is not called explicitly the
         * destructor will also call this.
         */
        void done() {
            m_do_cleanup = false;
            if (m_enable) {
                update(m_max_size);
                std::cerr << '\n';
            }
        }

    }; // class ProgressBar

} // namespace osmium

#endif // OSMIUM_UTIL_PROGRESS_BAR_HPP
