#ifndef OSMIUM_IO_FILE_HPP
#define OSMIUM_IO_FILE_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <cerrno>
#include <fcntl.h>
#include <stdexcept>
#include <string>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <cstdlib>

#include <osmium/io/encoding.hpp>
#include <osmium/io/file_type.hpp>

namespace osmium {

    namespace io {

        /**
         * This class describes an OSM file in one of several different formats.
         * It can be used as factory class for generating input and output OSM files.
         *
         * If the filename is empty, this means stdin or stdout is used. If you set
         * the filename to "-" it will be treated the same.
         */
        class File {

        private:

            /// Type of file.
            osmium::io::FileType* m_type;

            /// Encoding of file.
            osmium::io::Encoding* m_encoding;

            /// File name.
            std::string m_filename;

        public:

            /**
             * Create File using type and encoding from filename. If you want
             * to overwrite these settings you can change them later.
             *
             * @param filename Filename including suffix. The type and encoding
             *                 of the file will be taken from the suffix.
             *                 An empty filename or "-" means stdin or stdout.
             */
            File(const std::string& filename = "") :
                m_type(osmium::io::FileType::OSM()),
                m_encoding(osmium::io::Encoding::PBF()),
                m_filename(filename) {

                // stdin/stdout
                if (filename == "" || filename == "-") {
                    m_filename = "";
                    default_settings_for_stdinout();
                    return;
                }

                // filename is actually a URL
                std::string protocol = m_filename.substr(0, m_filename.find_first_of(':'));
                if (protocol == "http" || protocol == "https") {
                    default_settings_for_url();
                    return;
                }

                // isolate filename suffix
                size_t n = filename.find_last_of('/');
                if (n == std::string::npos) {
                    n = 0;
                } else {
                    ++n;
                }
                std::string suffix(filename.substr(filename.find_first_of('.', n)+1));

                set_type_and_encoding(suffix);
            }

            void set_type_and_encoding(const std::string& suffix) {
                if (suffix == "pbf" || suffix == "osm.pbf") {
                    m_type     = osmium::io::FileType::OSM();
                    m_encoding = osmium::io::Encoding::PBF();
                } else if (suffix == "osm") {
                    m_type     = osmium::io::FileType::OSM();
                    m_encoding = osmium::io::Encoding::XML();
                } else if (suffix == "osm.bz2") {
                    m_type     = osmium::io::FileType::OSM();
                    m_encoding = osmium::io::Encoding::XMLbz2();
                } else if (suffix == "osm.gz") {
                    m_type     = osmium::io::FileType::OSM();
                    m_encoding = osmium::io::Encoding::XMLgz();
                } else if (suffix == "osm.opl") {
                    m_type     = osmium::io::FileType::OSM();
                    m_encoding = osmium::io::Encoding::OPL();
                } else if (suffix == "osm.opl.bz2") {
                    m_type     = osmium::io::FileType::OSM();
                    m_encoding = osmium::io::Encoding::OPLbz2();
                } else if (suffix == "osm.opl.gz") {
                    m_type     = osmium::io::FileType::OSM();
                    m_encoding = osmium::io::Encoding::OPLgz();
                } else if (suffix == "osh.pbf") {
                    m_type     = osmium::io::FileType::History();
                    m_encoding = osmium::io::Encoding::PBF();
                } else if (suffix == "osh") {
                    m_type     = osmium::io::FileType::History();
                    m_encoding = osmium::io::Encoding::XML();
                } else if (suffix == "osh.bz2") {
                    m_type     = osmium::io::FileType::History();
                    m_encoding = osmium::io::Encoding::XMLbz2();
                } else if (suffix == "osh.gz") {
                    m_type     = osmium::io::FileType::History();
                    m_encoding = osmium::io::Encoding::XMLgz();
                } else if (suffix == "osc") {
                    m_type     = osmium::io::FileType::Change();
                    m_encoding = osmium::io::Encoding::XML();
                } else if (suffix == "osc.bz2") {
                    m_type     = osmium::io::FileType::Change();
                    m_encoding = osmium::io::Encoding::XMLbz2();
                } else if (suffix == "osc.gz") {
                    m_type     = osmium::io::FileType::Change();
                    m_encoding = osmium::io::Encoding::XMLgz();
                } else {
                    throw std::runtime_error(std::string("Unknown OSM file type or encoding: ") + suffix);
                }
            }

            File(const File& other) = default;
            File& operator=(const File& other) = default;

            File(File&& other) = default;
            File& operator=(File&& other) = default;

            /**
             * Set default settings for type and encoding when the filename is
             * empty or "-". If you want to have a different default setting
             * override this in a subclass.
             */
            void default_settings_for_stdinout() {
                m_type     = osmium::io::FileType::OSM();
                m_encoding = osmium::io::Encoding::PBF();
            }

            /**
             * Set default settings for type and encoding when the filename is
             * a normal file. If you want to have a different default setting
             * override this in a subclass.
             */
            void default_settings_for_file() {
                m_type     = osmium::io::FileType::OSM();
                m_encoding = osmium::io::Encoding::PBF();
            }

            /**
             * Set default settings for type and encoding when the filename is a URL.
             * If you want to have a different default setting override this in a
             * subclass.
             */
            void default_settings_for_url() {
                m_type     = osmium::io::FileType::OSM();
                m_encoding = osmium::io::Encoding::XML();
            }

            osmium::io::FileType* type() const {
                return m_type;
            }

            File& type(osmium::io::FileType* type) {
                m_type = type;
                return *this;
            }

            File& type(const std::string& type) {
                if (type == "osm") {
                    m_type = osmium::io::FileType::OSM();
                } else if (type == "history" || type == "osh") {
                    m_type = osmium::io::FileType::History();
                } else if (type == "change" || type == "osc") {
                    m_type = osmium::io::FileType::Change();
                } else {
                    throw std::runtime_error(std::string("Unknown OSM file type: ") + type);
                }
                return *this;
            }

            bool has_multiple_object_versions() const {
                return m_type->has_multiple_object_versions();
            }

            osmium::io::Encoding* encoding() const {
                return m_encoding;
            }

            File& encoding(osmium::io::Encoding* encoding) {
                m_encoding = encoding;
                return *this;
            }

            File& encoding(const std::string& encoding) {
                if (encoding == "pbf") {
                    m_encoding = osmium::io::Encoding::PBF();
                } else if (encoding == "xml") {
                    m_encoding = osmium::io::Encoding::XML();
                } else if (encoding == "xmlgz" || encoding == "gz") {
                    m_encoding = osmium::io::Encoding::XMLgz();
                } else if (encoding == "xmlbz2" || encoding == "bz2") {
                    m_encoding = osmium::io::Encoding::XMLbz2();
                } else if (encoding == "opl") {
                    m_encoding = osmium::io::Encoding::OPL();
                } else if (encoding == "oplgz") {
                    m_encoding = osmium::io::Encoding::OPLgz();
                } else if (encoding == "oplbz2") {
                    m_encoding = osmium::io::Encoding::OPLbz2();
                } else {
                    throw std::runtime_error(std::string("Unknown OSM file encoding: ") + encoding);
                }
                return *this;
            }

            File& filename(const std::string& filename) {
                if (filename == "-") {
                    m_filename = "";
                } else {
                    m_filename = filename;
                }
                return *this;
            }

            const std::string& filename() const {
                return m_filename;
            }

            std::string filename_without_suffix() const {
                return m_filename.substr(m_filename.find_first_of('.')+1);
            }

            std::string filename_with_default_suffix() const {
                std::string filename = filename_without_suffix();
                filename += m_type->suffix() + m_encoding->suffix();
                return filename;
            }

        }; // class File

    } // namespace io

} // namespace osmium

#endif // OSMIUM_IO_FILE_HPP
