#ifndef OSMIUM_IO_DETAIL_READ_THREAD_HPP
#define OSMIUM_IO_DETAIL_READ_THREAD_HPP

/*

This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013-2015 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <atomic>
#include <chrono>
#include <ratio>
#include <string>
#include <thread>
#include <utility>

#include <osmium/io/compression.hpp>
#include <osmium/io/detail/input_format.hpp>
#include <osmium/thread/queue.hpp>
#include <osmium/thread/util.hpp>

namespace osmium {

    namespace io {

        namespace detail {

            /**
             * This code runs in its own thread reading data from the input
             * file and (optionally) decompressing it. The result is sent to
             * the given queue.
             */
            class ReadThread {

                osmium::io::Decompressor* m_decompressor;
                future_string_queue_type& m_queue;

                // If this is set in the main thread, we have to wrap up at the
                // next possible moment.
                std::atomic<bool>& m_done;

                void send_to_queue(std::string&& data) {
                    std::promise<std::string> promise;
                    m_queue.push(promise.get_future());
                    promise.set_value(std::move(data));
                }

            public:

                ReadThread(osmium::io::Decompressor* decompressor,
                           future_string_queue_type& queue,
                           std::atomic<bool>& done) :
                    m_decompressor(decompressor),
                    m_queue(queue),
                    m_done(done) {
                }

                ReadThread(const ReadThread&) = default;
                ReadThread& operator=(const ReadThread&) = default;

                ReadThread(ReadThread&&) = default;
                ReadThread& operator=(ReadThread&&) = default;

                ~ReadThread() noexcept = default;

                bool operator()() {
                    osmium::thread::set_thread_name("_osmium_read");

                    try {
                        while (!m_done) {
                            std::string data {m_decompressor->read()};
                            if (data.empty()) { // end of file
                                break;
                            }
                            send_to_queue(std::move(data));
                        }

                        m_decompressor->close();
                    } catch (...) {
                        std::promise<std::string> promise;
                        m_queue.push(promise.get_future());
                        promise.set_exception(std::current_exception());
                    }

                    send_to_queue(std::string{});

                    return true;
                }

            }; // class ReadThread

            /**
             * Manages the read thread from the main thread, ie it starts it
             * and makes sure it is removed on destruction of the manager.
             */
            class ReadThreadManager {

                std::atomic<bool> m_done;
                std::thread m_thread;

            public:

                ReadThreadManager(osmium::io::Decompressor* decompressor,
                                  future_string_queue_type& input_queue) :
                    m_done(false),
                    m_thread(&ReadThread::operator(), ReadThread{decompressor, input_queue, m_done}) {
                }

                ReadThreadManager(const ReadThreadManager&) = delete;
                ReadThreadManager& operator=(const ReadThreadManager&) = delete;

                ReadThreadManager(ReadThreadManager&&) = delete;
                ReadThreadManager& operator=(ReadThreadManager&&) = delete;

                ~ReadThreadManager() noexcept {
                    try {
                        close();
                    } catch (...) {
                        // Ignore any exceptions because destructor must not throw.
                    }
                }

                void cancel() noexcept {
                    m_done = true;
                }

                void close() {
                    m_done = true;
                    if (m_thread.joinable()) {
                        m_thread.join();
                    }
                }

            }; // class ReadThreadManager

        } // namespace detail

    } // namespace io

} // namespace osmium

#endif // OSMIUM_IO_DETAIL_READ_THREAD_HPP
