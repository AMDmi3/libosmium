#ifndef OSMIUM_IO_DETAIL_ZLIB_HPP
#define OSMIUM_IO_DETAIL_ZLIB_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#define OSMIUM_LINK_WITH_LIBS_ZLIB -lz

#include <zlib.h>

namespace osmium {

    namespace io {

        namespace detail {

            /**
             * Compress data using zlib.
             *
             * @param input Data to compress
             * @return String Compressed data
             */
            std::string zlib_compress(const std::string& input) {
                std::string output(OSMPBF::max_uncompressed_blob_size, '\0');

                // zlib compression context
                z_stream z;

                // next byte to compress
                z.next_in   = reinterpret_cast<unsigned char*>(const_cast<char *>(input.data()));

                // number of bytes to compress
                z.avail_in  = input.size();

                // place to store compressed bytes
                z.next_out  = reinterpret_cast<unsigned char*>(const_cast<char *>(output.data()));

                // space for compressed data
                z.avail_out = OSMPBF::max_uncompressed_blob_size;

                // custom allocator functions - not used
                z.zalloc    = Z_NULL;
                z.zfree     = Z_NULL;
                z.opaque    = Z_NULL;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wold-style-cast"
                // initiate the compression
                if (deflateInit(&z, Z_DEFAULT_COMPRESSION) != Z_OK) {
                    throw std::runtime_error("failed to init zlib stream");
                }
#pragma GCC diagnostic pop

                // compress
                if (deflate(&z, Z_FINISH) != Z_STREAM_END) {
                    throw std::runtime_error("failed to deflate zlib stream");
                }

                // finish compression
                if (deflateEnd(&z) != Z_OK) {
                    throw std::runtime_error("failed to deinit zlib stream");
                }

                // number of compressed bytes
                output.resize(z.total_out);

                return output;
            }

        } // namespace detail

    } // namespace io

} // namespace osmium

#endif // OSMIUM_IO_DETAIL_ZLIB_HPP
