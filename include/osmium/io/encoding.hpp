#ifndef OSMIUM_IO_ENCODING_HPP
#define OSMIUM_IO_ENCODING_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <string>

namespace osmium {

    /**
     * @brief Namespace for everything related to input and output of OSM data.
     */
    namespace io {

        /**
         * Instances of this class describe different file encodings (ie PBF,
         * XML or different compressed versions of XML).
         *
         * You can not create instances of this class yourself, instead use
         * the static methods provided to get the predefined instances.
         */
        class Encoding {

            const std::string m_suffix;
            const std::string m_compress;
            const std::string m_decompress;
            const bool m_pbf;

            Encoding(const std::string& suffix, const std::string& compress, const std::string& decompress, bool pbf) :
                m_suffix(suffix),
                m_compress(compress),
                m_decompress(decompress),
                m_pbf(pbf) {
            }

            Encoding(const Encoding&) = delete;
            Encoding& operator=(const Encoding&) = delete;

        public:

            const std::string& suffix() const {
                return m_suffix;
            }

            const std::string& compress() const {
                return m_compress;
            }

            const std::string& decompress() const {
                return m_decompress;
            }

            bool is_pbf() const {
                return m_pbf;
            }

            /**
             * Encoding in PBF.
             */
            static Encoding* PBF() {
                static Encoding instance(".pbf", "", "", true);
                return &instance;
            }

            /**
             * XML encoding, uncompressed.
             */
            static Encoding* XML() {
                static Encoding instance("", "", "", false);
                return &instance;
            }

            /**
             * XML encoding, compressed with gzip.
             */
            static Encoding* XMLgz() {
                static Encoding instance(".gz", "gzip", "zcat", false);
                return &instance;
            }

            /**
             * XML encoding, compressed with bzip2.
             */
            static Encoding* XMLbz2() {
                static Encoding instance(".bz2", "bzip2", "bzcat", false);
                return &instance;
            }

            /**
             * OPL encoding, uncompressed.
             */
            static Encoding* OPL() {
                static Encoding instance(".opl", "", "", false);
                return &instance;
            }

            /**
             * OPL encoding, compressed with gzip.
             */
            static Encoding* OPLgz() {
                static Encoding instance(".opl.gz", "gzip", "zcat", false);
                return &instance;
            }

            /**
             * OPL encoding, compressed with bzip2.
             */
            static Encoding* OPLbz2() {
                static Encoding instance(".opl.bz2", "bzip2", "bzcat", false);
                return &instance;
            }

        }; // class Encoding

    } // namespace io

} // namespace osmium

#endif // OSMIUM_IO_ENCODING_HPP
