#ifndef OSMIUM_IO_READER_HPP
#define OSMIUM_IO_READER_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <functional>
#include <memory>
#include <string>
#include <thread>
#include <utility>

#include <osmium/io/input.hpp>
#include <osmium/io/compression.hpp>
#include <osmium/thread/queue.hpp>
#include <osmium/thread/debug.hpp>

namespace osmium {

    namespace io {

        class InputThread {

            osmium::thread::Queue<std::string>& m_queue;
            const std::string& m_compression;
            const int m_fd;

        public:

            InputThread(osmium::thread::Queue<std::string>& queue, const std::string& compression, int fd) :
                m_queue(queue),
                m_compression(compression),
                m_fd(fd) {
            }

            void operator()() {
                osmium::thread::set_thread_name("_osmium_input");

                std::unique_ptr<osmium::io::Compression> compressor = osmium::io::CompressionFactory::instance().create_compression(m_compression, m_fd, false);

                bool done = false;
                while (!done) {
                    std::string data {compressor->read()};
                    if (data.empty()) {
                        done = true;
                    }
                    m_queue.push(std::move(data));
                    while (m_queue.size() > 10) {
                        std::this_thread::sleep_for(std::chrono::milliseconds(10));
                    }
                }

                compressor->close();
            }

        }; // class InputThread

        class Reader {

            osmium::io::File m_file;
            std::unique_ptr<osmium::io::Input> m_input;
            osmium::thread::Queue<std::string> m_input_queue {};
            std::thread m_input_thread;
            osmium::osm_entity::flags m_read_types {osmium::osm_entity::flags::all};

        public:

            Reader(osmium::io::File file) :
                m_file(std::move(file)),
                m_input(osmium::io::InputFactory::instance().create_input(m_file, m_input_queue)) {
                int fd = osmium::io::detail::open_for_reading(m_file.filename());
                m_input_thread = std::thread(InputThread {m_input_queue, m_file.encoding()->compress(), fd});
            }

            Reader(const std::string& filename) :
                Reader(osmium::io::File(filename)) {
            }

            Reader(const Reader&) = delete;
            Reader& operator=(const Reader&) = delete;

            ~Reader() {
                close();
                if (m_input_thread.joinable()) {
                    m_input_thread.join();
                }
            }

            void close() {
                // XXX
//                m_input->close();
            }

            osmium::io::Header open(osmium::osm_entity::flags read_types = osmium::osm_entity::flags::all) {
                m_read_types = read_types;
                return m_input->read(read_types);
            }

            osmium::memory::Buffer read() {
                if (m_read_types == osmium::osm_entity::flags::nothing) {
                    // If the caller didn't want anything but the header, it will
                    // always get an empty buffer here.
                    return osmium::memory::Buffer();
                }
                return m_input->next_buffer();
            }

        }; // class Reader

    } // namespace io

} // namespace osmium

#endif // OSMIUM_IO_READER_HPP
