#ifndef OSMIUM_IO_COMPRESSION_HPP
#define OSMIUM_IO_COMPRESSION_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <functional>
#include <map>
#include <memory>
#include <string>

#include <osmium/io/detail/read_write.hpp>

namespace osmium {

    namespace io {

        class Compression {

        public:

            Compression() {
            }

            virtual ~Compression() {
            }

            virtual std::string read() = 0;

            virtual void write(const std::string& data) = 0;

            virtual void close() = 0;

        }; // class Compression

        /**
         * This factory class is used to register compression algorithms used
         * for reading and writing OSM files.
         */
        class CompressionFactory {

        public:

            typedef std::function<osmium::io::Compression*(int, bool)> create_compression_type;

        private:

            typedef std::map<std::string, create_compression_type> compression_map_type;

            compression_map_type m_callbacks {};

            CompressionFactory() {
            }

            CompressionFactory(const CompressionFactory&) = delete;
            CompressionFactory& operator=(const CompressionFactory&) = delete;

            CompressionFactory(CompressionFactory&&) = delete;
            CompressionFactory& operator=(CompressionFactory&&) = delete;

        public:

            static CompressionFactory& instance() {
                static CompressionFactory factory;
                return factory;
            }

            bool register_compression(const std::string& name, create_compression_type create_function) {
                if (! m_callbacks.insert(compression_map_type::value_type(name, create_function)).second) {
                    return false;
                }
                return true;
            }

            std::unique_ptr<osmium::io::Compression> create_compression(const std::string& name, int fd, bool write) {
                compression_map_type::iterator it = m_callbacks.find(name);

                if (it != m_callbacks.end()) {
                    return std::unique_ptr<osmium::io::Compression>((it->second)(fd, write));
                }

                throw std::runtime_error("compression type not supported"); // XXX output compression type
            }

        }; // class CompressionFactory

        class NoCompression : public Compression {

            int m_fd;

        public:

            NoCompression(int fd, bool) :
                Compression(),
                m_fd(fd) {
            }

            ~NoCompression() override final {
                this->close();
            }

            std::string read() override final {
                // XXX
            }

            void write(const std::string& data) override final {
                osmium::io::detail::reliable_write(m_fd, data.data(), data.size());
            }

            void close() override final {
                if (m_fd >= 0) {
                    ::close(m_fd);
                    m_fd = -1;
                }
            }

        }; // class NoCompression

        namespace {

            const bool registered_no_compression = osmium::io::CompressionFactory::instance().register_compression({
                ""
            }, [](int fd, bool write) {
                return new osmium::io::NoCompression(fd, write);
            });

        } // anonymous namespace

    } // namespace io

} // namespace osmium

#endif // OSMIUM_IO_COMPRESSION_HPP
