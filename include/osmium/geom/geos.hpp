#ifndef OSMIUM_GEOM_GEOS_HPP
#define OSMIUM_GEOM_GEOS_HPP

/*

This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013,2014 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#define OSMIUM_COMPILE_WITH_CFLAGS_GEOS `geos-config --cflags`
#define OSMIUM_LINK_WITH_LIBS_GEOS `geos-config --libs`

#include <utility>

#include <geos/geom/GeometryFactory.h>
#include <geos/geom/PrecisionModel.h>
#include <geos/geom/Coordinate.h>
#include <geos/geom/CoordinateSequence.h>
#include <geos/geom/CoordinateSequenceFactory.h>
#include <geos/geom/Point.h>
#include <geos/geom/LinearRing.h>
#include <geos/geom/Polygon.h>
#include <geos/geom/MultiPolygon.h>

#include <osmium/osm/location.hpp>
#include <osmium/geom/factory.hpp>

namespace osmium {

    namespace geom {

        struct geos_factory_traits {
            typedef std::unique_ptr<geos::geom::Point>        point_type;
            typedef std::unique_ptr<geos::geom::LineString>   linestring_type;
            typedef std::unique_ptr<geos::geom::Polygon>      polygon_type;
            typedef std::unique_ptr<geos::geom::MultiPolygon> multipolygon_type;
            typedef std::unique_ptr<geos::geom::LinearRing>   ring_type;
        };

        class GEOSFactory : public GeometryFactory<GEOSFactory, geos_factory_traits> {

            friend class GeometryFactory;

            geos::geom::PrecisionModel m_precision_model;
            geos::geom::GeometryFactory m_geos_factory;

        public:

            explicit GEOSFactory(int srid = -1) :
                GeometryFactory<GEOSFactory, geos_factory_traits>(),
                m_precision_model(),
                m_geos_factory(&m_precision_model, srid) {
            }

        private:

            geos::geom::Coordinate create_geos_coordinate(const osmium::Location location) const {
                return geos::geom::Coordinate(location.lon(), location.lat());
            }

            /* Point */

            point_type make_point(const osmium::Location location) const {
                return point_type(m_geos_factory.createPoint(create_geos_coordinate(location)));
            }

            /* LineString */

            std::unique_ptr<geos::geom::CoordinateSequence> m_coordinate_sequence;

            void linestring_start() {
                m_coordinate_sequence.reset(m_geos_factory.getCoordinateSequenceFactory()->create(static_cast<size_t>(0), 2));
            }

            void linestring_add_location(const Location location) {
                m_coordinate_sequence->add(create_geos_coordinate(location));
            }

            linestring_type linestring_finish() {
                return linestring_type(m_geos_factory.createLineString(m_coordinate_sequence.release()));
            }

            /* MultiPolygon */

            std::vector<std::unique_ptr<geos::geom::LinearRing>> m_rings;
            std::vector<std::unique_ptr<geos::geom::Polygon>> m_polygons;

            void multipolygon_start() {
            }

            void multipolygon_polygon_start() {
            }

            void multipolygon_polygon_finish() {
                assert(!m_rings.empty());
                auto inner_rings = new std::vector<geos::geom::Geometry*>;
                std::transform(std::next(m_rings.begin(), 1), m_rings.end(), std::back_inserter(*inner_rings), [](std::unique_ptr<geos::geom::LinearRing>& r) {
                    return r.release();
                });
                m_polygons.emplace_back(m_geos_factory.createPolygon(m_rings[0].release(), inner_rings));
                m_rings.clear();
            }

            void multipolygon_outer_ring_start() {
                m_coordinate_sequence.reset(m_geos_factory.getCoordinateSequenceFactory()->create(static_cast<size_t>(0), 2));
            }

            void multipolygon_outer_ring_finish() {
                m_rings.emplace_back(m_geos_factory.createLinearRing(m_coordinate_sequence.release()));
            }

            void multipolygon_inner_ring_start() {
                m_coordinate_sequence.reset(m_geos_factory.getCoordinateSequenceFactory()->create(static_cast<size_t>(0), 2));
            }

            void multipolygon_inner_ring_finish() {
                m_rings.emplace_back(m_geos_factory.createLinearRing(m_coordinate_sequence.release()));
            }

            void multipolygon_add_location(const osmium::Location location) {
                m_coordinate_sequence->add(create_geos_coordinate(location));
            }

            multipolygon_type multipolygon_finish() {
                auto polygons = new std::vector<geos::geom::Geometry*>;
                std::transform(m_polygons.begin(), m_polygons.end(), std::back_inserter(*polygons), [](std::unique_ptr<geos::geom::Polygon>& p) {
                    return p.release();
                });
                return multipolygon_type(m_geos_factory.createMultiPolygon(polygons));
            }

        }; // class GEOSFactory

    } // namespace geom

} // namespace osmium

#endif // OSMIUM_GEOM_GEOS_HPP
