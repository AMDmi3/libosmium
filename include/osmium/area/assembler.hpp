#ifndef OSMIUM_AREA_ASSEMBLER_HPP
#define OSMIUM_AREA_ASSEMBLER_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013,2014 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <algorithm>
#include <iostream>
#include <iterator>
#include <vector>

#include <osmium/memory/buffer.hpp>
#include <osmium/osm/area.hpp>
#include <osmium/osm/builder.hpp>
#include <osmium/osm/location.hpp>
#include <osmium/osm/ostream.hpp>
#include <osmium/osm/relation.hpp>

#include <osmium/area/segment.hpp>
#include <osmium/area/problem.hpp>
#include <osmium/area/detail/proto_ring.hpp>

namespace osmium {

    namespace area {

        using osmium::area::detail::ProtoRing;

        /**
         * Assembles area objects from multipolygon relations and their
         * members. This is called by the Collector object after all
         * members have been collected.
         */
        class Assembler {

            bool is_below(const osmium::Location& loc, const NodeRefSegment& seg) const {
                double ax = seg.first().location().x();
                double bx = seg.second().location().x();
                double cx = loc.x();
                double ay = seg.first().location().y();
                double by = seg.second().location().y();
                double cy = loc.y();
                return ((bx - ax)*(cy - ay) - (by - ay)*(cx - ax)) <= 0;
            }

            ProtoRing* find_outer(std::vector<ProtoRing>& rings, const ProtoRing& ring) {
                // dummy
                for (auto& ring : rings) {
                    if (ring.is_outer()) {
                        return &ring;
                    }
                }
                return nullptr;
            }

            /**
             * Find intersection between segments.
             *
             * @returns true if there are intersections.
             */
            bool find_intersections(std::vector<NodeRefSegment>& segments) {
                if (segments.begin() == segments.end()) {
                    return false;
                }

                bool found_intersections = false;
                for (auto it1 = segments.begin(); it1 != segments.end()-1; ++it1) {
                    const NodeRefSegment& s1 = *it1;
                    for (auto it2 = it1+1; it2 != segments.end(); ++it2) {
                        const NodeRefSegment& s2 = *it2;
                        if (s1 == s2) {
                            std::cerr << "overlap on segment " << s1 << "\n";
                        } else {
                            if (outside_x_range(s2, s1)) {
                                break;
                            }
                            if (y_range_overlap(s1, s2)) {
                                osmium::Location i = intersection(s1, s2);
                                if (i) {
                                    found_intersections = true;
                                    // intersections.push_back(i);
                                    std::cerr << "intersection " << i << "\n";
                                    m_problems.emplace_back(Problem(osmium::area::Problem::problem_type::intersection, osmium::NodeRef(0, i), s1, s2));
                                }
                            }
                        }
                    }
                }
                return found_intersections;
            }

            std::vector<Problem> m_problems;

        public:

            Assembler() {
            }

            const std::vector<Problem>& problems() const {
                return m_problems;
            }

            void operator()(const osmium::Relation& relation, std::vector<size_t>& members, const osmium::memory::Buffer& in_buffer, osmium::memory::Buffer& out_buffer) {

                // First we extract all segments from all ways that make up this
                // multipolygon relation. The segments all have their smaller
                // coordinate at the beginning of the segment. Smaller, in this
                // case, means smaller x coordinate, and if they are the same
                // smaller y coordinate.
                std::vector<NodeRefSegment> segments;

                for (size_t offset : members) {
                    const osmium::Way& way = in_buffer.get<const osmium::Way>(offset);
                    osmium::NodeRef last_nr;
                    for (osmium::NodeRef nr : way.nodes()) {
                        if (last_nr.location() && last_nr != nr) {
                            segments.push_back(NodeRefSegment(last_nr, nr));
                        }
                        last_nr = nr;
                    }
                }

                std::cerr << "\nBuild relation id()=" << relation.id() << " members.size()=" << members.size() << " segments.size()=" << segments.size() << "\n";

                // Now all of these segments are sorted. Again, smaller, in
                // this case, means smaller x coordinate, and if they are the
                // same smaller y coordinate.
                std::sort(segments.begin(), segments.end());

                // remove empty segments
/*                segments.erase(std::remove_if(segments.begin(), segments.end(), [](osmium::UndirectedSegment& segment) {
                    return segment.first() == segment.second();
                }));*/

                // Find duplicate segments (ie same start and end point) and
                // removes them.
                while (true) {
                    std::vector<NodeRefSegment>::iterator found = std::adjacent_find(segments.begin(), segments.end());
                    if (found == segments.end()) {
                        break;
                    }
                    std::cerr << "erase duplicate: " << *found << "\n";
                    segments.erase(found, found+2);
                }

                // Now we look for segments crossing each other. If there are
                // any, the multipolygon is invalid.
                if (find_intersections(segments)) {
                    std::cerr << "INTERSECTION!\n";
                }

                std::vector<ProtoRing> rings;

                // Now iterator over all segments and add them to rings
                // until there are no segments left.
                for (auto it = segments.begin(); it != segments.end(); ++it) {
                    auto& segment = *it;

                    std::cerr << "  check segment " << segment << "\n";

                    int n=0;
                    for (auto& ring : rings) {
                        std::cerr << "    check against ring " << n << " " << ring << "\n";
                        if (!ring.closed()) {
                            if (ring.last() == segment.first() ) {
                                std::cerr << "      match\n";
                                ring.add_location_end(segment.second());
                                combine_rings_end(ring, rings);
                                goto next_segment;
                            }
                            if (ring.last() == segment.second() ) {
                                std::cerr << "      match\n";
                                ring.add_location_end(segment.first());
                                combine_rings_end(ring, rings);
                                goto next_segment;
                            }
                            if (ring.first() == segment.first() ) {
                                std::cerr << "      match\n";
                                ring.add_location_start(segment.second());
                                combine_rings_start(ring, rings);
                                goto next_segment;
                            }
                            if (ring.first() == segment.second() ) {
                                std::cerr << "      match\n";
                                ring.add_location_start(segment.first());
                                combine_rings_start(ring, rings);
                                goto next_segment;
                            }
                        } else {
                            std::cerr << "      ring CLOSED\n";
                        }

                        ++n;
                    }

                    {
                        std::cerr << "    new ring for segment " << segment << "\n";
                        ProtoRing ri;

                        bool cw = true;

                        if (it != segments.begin()) {
                            osmium::Location loc = segment.first().location();
                            std::cerr << "      compare against id=" << segment.first().ref() << " lat()=" << loc.lat() << "\n";
                            for (auto oit = it-1; oit != segments.begin()-1; --oit) {
                                std::cerr << "      seg=" << *oit << "\n";
                                auto mm = std::minmax(oit->first().location().y(), oit->second().location().y());
                                if (mm.first <= loc.y() && mm.second >= loc.y()) {
                                    std::cerr << "        in range\n";
                                    if (oit->first().location().x() <= loc.x() &&
                                        oit->second().location().x() <= loc.x()) {
                                        cw = !oit->cw();
                                        break;
                                    }
                                    if (is_below(loc, *oit)) { // XXX
                                        cw = !oit->cw();
                                        break;
                                    }
                                }
                            }
                        }

                        if (cw) {
                            std::cerr << "      is cw\n";
                            NodeRefSegment s = segment.make_cw();
                            ri.add_location_end(s.first());
                            ri.add_location_end(s.second());
                        } else {
                            std::cerr << "      is ccw\n";
                            NodeRefSegment s = segment.make_ccw();
                            ri.add_location_end(s.first());
                            ri.add_location_end(s.second());
                        }

                        rings.push_back(ri);
                    }

                    next_segment:
                        ;

                }

                // create Area object
                osmium::osm::AreaBuilder builder(out_buffer);
                osmium::Area& area = builder.object();
                area.id(relation.id() * 2 + 1);
                area.version(relation.version());
                area.changeset(relation.changeset());
                area.timestamp(relation.timestamp());
                area.visible(relation.visible());
                area.uid(relation.uid());

                builder.add_user(relation.user());

                {
                    osmium::osm::TagListBuilder tl_builder(out_buffer, &builder);
                    for (const osmium::Tag& tag : relation.tags()) {
                        tl_builder.add_tag(tag.key(), tag.value());
                    }
                }

                for (auto& ring : rings) {
                    if (!ring.closed()) {
                        m_problems.emplace_back(Problem(osmium::area::Problem::problem_type::ring_not_closed, ring.first()));
                        m_problems.emplace_back(Problem(osmium::area::Problem::problem_type::ring_not_closed, ring.last()));
                        std::cerr << "    not all rings are closed\n";
                        out_buffer.commit();
                        return;
                    }
                }

                for (auto& ring : rings) {
                    if (!ring.is_outer()) {
                        ProtoRing* outer = find_outer(rings, ring);
                        if (outer) {
                            outer->add_inner_ring(&ring);
                        } else {
                            std::cerr << "    something bad happened\n";
                            out_buffer.commit();
                            return;
                        }
                    }
                }

                for (auto& ring : rings) {
                    if (ring.is_outer()) {
                        std::cerr << "    ring " << ring << " is outer\n";
                        osmium::osm::OuterRingBuilder ring_builder(out_buffer, &builder);
                        for (auto& node_ref : ring.nodes()) {
                            ring_builder.add_node_ref(node_ref);
                        }
                        for (ProtoRing* inner : ring.inner_rings()) {
                            osmium::osm::InnerRingBuilder ring_builder(out_buffer, &builder);
                            for (auto& node_ref : inner->nodes()) {
                                ring_builder.add_node_ref(node_ref);
                            }
                        }
                        out_buffer.commit();
                    }
                }
            }

        }; // class Assembler

    } // namespace area

} // namespace osmium

#endif // OSMIUM_AREA_ASSEMBLER_HPP
