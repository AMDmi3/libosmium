#ifndef OSMIUM_AREA_ASSEMBLER_HPP
#define OSMIUM_AREA_ASSEMBLER_HPP

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013,2014 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <algorithm>
#include <iostream>
#include <iterator>
#include <vector>

#include <osmium/memory/buffer.hpp>
#include <osmium/osm/area.hpp>
#include <osmium/osm/builder.hpp>
#include <osmium/osm/relation.hpp>
#include <osmium/osm/undirected_segment.hpp>
#include <osmium/osm/ostream.hpp>

namespace osmium {

    namespace area {

        /**
         * Assembles area objects from multipolygon relations and their
         * members. This is called by the Collector object after all
         * members have been collected.
         */
        class Assembler {

            /**
             * A ring in the process of being built by the Assembler object.
             */
            class ProtoRing {

                std::vector<osmium::NodeRef> m_nodes;
                bool m_outer;

            public:

                ProtoRing() :
                    m_nodes(),
                    m_outer(true) {
                }

                const std::vector<osmium::NodeRef>& nodes() const {
                    return m_nodes;
                }

                void add_location_end(const osmium::Location& location) {
                    m_nodes.push_back(osmium::NodeRef(0, location));
                }

                void add_location_start(const osmium::Location& location) {
                    m_nodes.insert(m_nodes.begin(), osmium::NodeRef(0, location));
                }

                const osmium::NodeRef& first() const {
                    return m_nodes.front();
                }

                osmium::NodeRef& first() {
                    return m_nodes.front();
                }

                const osmium::NodeRef& last() const {
                    return m_nodes.back();
                }

                osmium::NodeRef& last() {
                    return m_nodes.back();
                }

                const osmium::Location top() const {
                    return first().location().y() > last().location().y() ? first().location() : last().location();
                }

                const osmium::Location bottom() const {
                    return first().location().y() < last().location().y() ? first().location() : last().location();
                }

                bool closed() const {
                    return m_nodes.front().location() == m_nodes.back().location();
                }

                bool outer() const {
                    return m_outer;
                }

                void outer(bool value) {
                    m_outer = value;
                }

                void swap_nodes(ProtoRing& other) {
                    std::swap(m_nodes, other.m_nodes);
                }

                /**
                 * Merge other ring to end of this ring.
                 */
                void merge_ring(const ProtoRing& other) {
                    if (outer() != other.outer()) {
                        std::cerr << "Merging inner ring with outer!\n";
                    }

                    if (last() == other.first()) {
                        for (auto ni = other.nodes().begin() + 1; ni != other.nodes().end(); ++ni) {
                            add_location_end(ni->location());
                        }
                    } else {
                        assert(last() == other.last());
                        for (auto ni = other.nodes().rbegin() + 1; ni != other.nodes().rend(); ++ni) {
                            add_location_end(ni->location());
                        }
                    }
                }

            }; // class ProtoRing

            bool find_outer(const std::vector<ProtoRing>& rings, const osmium::Location& location) {
                std::vector<ProtoRing> candidates;

                for (const auto& ring : rings) {
                    if (ring.bottom().y() <= location.y() && ring.top().y() >= location.y()) {
                        candidates.push_back(ring);
                    }
                }

                if (candidates.empty()) {
                    return true;
                }

                std::sort(candidates.begin(), candidates.end(), [](const ProtoRing& a, const ProtoRing& b) {
                    return (a.top().y() - a.bottom().y()) < (b.top().y() - b.bottom().y());
                });

                return !candidates.front().outer();
            }

            void combine_rings_end(ProtoRing& ring, std::vector<ProtoRing>& rings) {
                osmium::Location location = ring.last().location();

                for (auto it = rings.begin(); it != rings.end(); ++it) {
                    if (&*it != &ring) {
                        if ((location == it->first().location()) || (location == it->last().location())) {
                            ring.merge_ring(*it);
                            rings.erase(it);
                            return;
                        }
                    }
                }
            }

            void combine_rings_start(ProtoRing& ring, std::vector<ProtoRing>& rings) {
                osmium::Location location = ring.first().location();

                for (auto it = rings.begin(); it != rings.end(); ++it) {
                    if (&*it != &ring) {
                        if ((location == it->first().location()) || (location == it->last().location())) {
                            ring.swap_nodes(*it);
                            ring.merge_ring(*it);
                            rings.erase(it);
                            return;
                        }
                    }
                }
            }

        public:

            Assembler() {
            }

            void operator()(const osmium::Relation& relation, std::vector<size_t>& members, osmium::memory::Buffer& in_buffer, osmium::memory::Buffer& out_buffer) {
                std::cerr << "build rel " << relation.id() << " members.size=" << members.size() << "\n";

                std::vector<osmium::UndirectedSegment> segments;

                for (size_t offset : members) {
                    const osmium::Way& way = in_buffer.get<const osmium::Way>(offset);
                    osmium::NodeRef last_nr;
                    for (osmium::NodeRef nr : way.nodes()) {
                        if (last_nr.location() && last_nr != nr) {
                            segments.push_back(osmium::UndirectedSegment(last_nr.location(), nr.location()));
                        }
                        last_nr = nr;
                    }
                }

                std::cerr << "segments: " << segments.size() << "\n";

                std::sort(segments.begin(), segments.end());

                // remove empty segments
/*                segments.erase(std::remove_if(segments.begin(), segments.end(), [](osmium::UndirectedSegment& segment) {
                    return segment.first() == segment.second();
                }));*/

                // remove duplicates
                while (true) {
                    std::vector<osmium::UndirectedSegment>::iterator found = std::adjacent_find(segments.begin(), segments.end());
                    if (found == segments.end()) {
                        break;
                    }
                    std::cerr << "erase: " << *found << "\n";
                    segments.erase(found, found+2);
                }

                std::vector<ProtoRing> rings;

                for (const osmium::UndirectedSegment& segment : segments) {
//                    osmium::Location loc = segment.first();

                    std::cerr << "  check segment " << segment << "\n";

                    int n=0;
                    for (auto& ring : rings) {
                        std::cerr << "  check against ring " << n << " [" << ring.first().location() << "..." << ring.last().location() << "]\n";
                        if (!ring.closed()) {
                            std::cerr << "      ring " << ring.first().location() << "..." << ring.last().location() << "\n";
                            if (ring.last().location() == segment.first() ) {
                                ring.add_location_end(segment.second());

                                combine_rings_end(ring, rings);
                                goto next_segment;
                            }
                            if (ring.last().location() == segment.second() ) {
                                ring.add_location_end(segment.first());
                                combine_rings_end(ring, rings);
                                goto next_segment;
                            }
                            if (ring.first().location() == segment.first() ) {
                                ring.add_location_start(segment.second());
                                combine_rings_start(ring, rings);
                                goto next_segment;
                            }
                            if (ring.first().location() == segment.second() ) {
                                ring.add_location_start(segment.first());
                                combine_rings_start(ring, rings);
                                goto next_segment;
                            }
                        } else {
                            std::cerr << "      ring CLOSED\n";
                        }

                        ++n;
                    }

                    {
                        std::cerr << "    new ring for segment " << segment << "\n";
                        ProtoRing ri;
                        ri.add_location_end(segment.first());
                        ri.add_location_end(segment.second());

                        bool outer = find_outer(rings, segment.first());
                        ri.outer(outer);

                        rings.push_back(ri);
                    }

                    next_segment:
                        ;

                }

                // create Area object
                osmium::osm::AreaBuilder builder(out_buffer);
                osmium::Area& area = builder.object();
                area.id(relation.id() * 2 + 1);
                area.version(relation.version());
                area.changeset(relation.changeset());
                area.timestamp(relation.timestamp());
                area.visible(relation.visible());
                area.uid(relation.uid());

                builder.add_user(relation.user());

                {
                    osmium::osm::TagListBuilder tl_builder(out_buffer, &builder);
                    for (const osmium::Tag& tag : relation.tags()) {
                        tl_builder.add_tag(tag.key(), tag.value());
                    }
                }

                for (auto& ring : rings) {
                    if (ring.outer()) {
                        osmium::osm::OuterRingBuilder ring_builder(out_buffer, &builder);
                        for (auto& node_ref : ring.nodes()) {
                            ring_builder.add_node_ref(node_ref);
                        }
                    } else {
                        osmium::osm::InnerRingBuilder ring_builder(out_buffer, &builder);
                        for (auto& node_ref : ring.nodes()) {
                            ring_builder.add_node_ref(node_ref);
                        }
                    }
                }

                out_buffer.commit();
            }

        }; // class Assembler

    } // namespace area

} // namespace osmium

#endif // OSMIUM_AREA_ASSEMBLER_HPP
