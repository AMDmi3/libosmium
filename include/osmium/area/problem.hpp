#ifndef OSMIUM_AREA_PROBLEM
#define OSMIUM_AREA_PROBLEM

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013,2014 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <osmium/osm/location.hpp>
#include <osmium/osm/noderef.hpp>
#include <osmium/osm/segment.hpp>
#include <osmium/osm/types.hpp>

namespace osmium {

    namespace area {

        class Problem {

        public:

            enum class problem_type : int {
                intersection         = 0,
                ring_not_closed      = 1,
                role_should_be_outer = 2,
                role_should_be_inner = 3
            }; // enum class problem_type

        private:

            const problem_type m_problem;
            const osmium::object_id_type m_object_id;

        protected:

            Problem(const problem_type problem, const osmium::object_id_type object_id) :
                m_problem(problem),
                m_object_id(object_id) {
            }

        public:

            problem_type type() const {
                return m_problem;
            }

            std::string type_string() const {
                std::string p;
                switch (m_problem) {
                    case problem_type::intersection:
                        p = "intersection";
                        break;
                    case problem_type::ring_not_closed:
                        p = "ring_not_closed";
                        break;
                    case problem_type::role_should_be_outer:
                        p = "role_should_be_outer";
                        break;
                    case problem_type::role_should_be_inner:
                        p = "role_should_be_inner";
                        break;
                }
                return p;
            }

            osmium::object_id_type object_id() const {
                return m_object_id;
            }

        }; // class Problem

        class ProblemPoint : public Problem {

            const osmium::object_id_type m_node_id;
            const osmium::Location m_location;

        public:

            ProblemPoint(const problem_type problem, const osmium::object_id_type object_id, const osmium::object_id_type node_id, const osmium::Location location) :
                Problem(problem, object_id),
                m_node_id(node_id),
                m_location(location) {
            }

            ProblemPoint(const problem_type problem, const osmium::object_id_type object_id, const osmium::NodeRef& node_ref) :
                Problem(problem, object_id),
                m_node_id(node_ref.ref()),
                m_location(node_ref.location()) {
            }

            osmium::object_id_type node_id() const {
                return m_node_id;
            }

            osmium::Location location() const {
                return m_location;
            }

        }; // class ProblemPoint

        class ProblemLine : public Problem {

            const osmium::object_id_type m_way_id;
            const osmium::Segment m_segment;

        public:

            ProblemLine(const problem_type problem, const osmium::object_id_type object_id, const osmium::object_id_type way_id, const osmium::Segment segment) :
                Problem(problem, object_id),
                m_way_id(way_id),
                m_segment(segment) {
            }

            ProblemLine(const problem_type problem, const osmium::object_id_type object_id, const osmium::object_id_type way_id, const osmium::Location loc1, const osmium::Location loc2) :
                Problem(problem, object_id),
                m_way_id(way_id),
                m_segment(loc1, loc2) {
            }

            osmium::object_id_type way_id() const {
                return m_way_id;
            }

            const osmium::Segment& segment() const {
                return m_segment;
            }

        }; // class ProblemLine

    } // namespace area

} // namespace osmium

#endif // OSMIUM_AREA_PROBLEM
