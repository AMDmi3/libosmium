#ifndef OSMIUM_AREA_SEGMENT
#define OSMIUM_AREA_SEGMENT

/*

This file is part of Osmium (http://osmcode.org/osmium).

Copyright 2013,2014 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <algorithm>

#include <boost/operators.hpp>

#include <osmium/osm/noderef.hpp>
#include <osmium/osm/ostream.hpp>

namespace osmium {

    namespace area {

        namespace detail {
            class ProtoRing;
        }

        /**
         * This helper class for the Assembler class models a segment
         * (connection between two nodes).
         */
        class NodeRefSegment : boost::less_than_comparable<NodeRefSegment> {

            osmium::NodeRef m_first;
            osmium::NodeRef m_second;

            /// This is the ring this segment is in (if already known).
            osmium::area::detail::ProtoRing* m_ring { nullptr };

            NodeRefSegment* m_left_segment { nullptr };

            bool m_cw {true};

            void swap_locations() {
                using std::swap;
                swap(m_first, m_second);
            }

            bool swap_ends() const {
                return m_cw == (m_first.location().y() >= m_second.location().y());
            }

        public:

            NodeRefSegment() :
                m_first(),
                m_second() {
            }

            NodeRefSegment(const osmium::NodeRef& nr1, const osmium::NodeRef& nr2) :
                m_first(nr1),
                m_second(nr2) {
                if (nr2.location() < nr1.location()) {
                    swap_locations();
                }
            }

            NodeRefSegment(const NodeRefSegment&) = default;
            NodeRefSegment(NodeRefSegment&&) = default;

            NodeRefSegment& operator=(const NodeRefSegment&) = default;
            NodeRefSegment& operator=(NodeRefSegment&&) = default;

            ~NodeRefSegment() = default;

            /// Return first NodeRef of Segment according to sorting order (bottom left to top right).
            const osmium::NodeRef& first() const {
                return m_first;
            }

            /// Return second NodeRef of Segment according to sorting order (bottom left to top right).
            const osmium::NodeRef& second() const {
                return m_second;
            }

            /// Return first NodeRef of Segment taking into account whether this Segment is set as clockwise or counter-clockwise.
            const osmium::NodeRef& first_cw() const {
                return swap_ends() ? m_second : m_first;
            }

            /// Return second NodeRef of Segment taking into account whether this Segment is set as clockwise or counter-clockwise.
            const osmium::NodeRef& second_cw() const {
                return swap_ends() ? m_first : m_second;
            }

            NodeRefSegment* left_segment() const {
                return m_left_segment;
            }

            void left_segment(NodeRefSegment* segment) {
                m_left_segment = segment;
            }

            osmium::area::detail::ProtoRing* ring() const {
                return m_ring;
            }

            void ring(osmium::area::detail::ProtoRing* ring) {
                m_ring = ring;
            }

            /// Is this segment oriented clockwise?
            bool cw() const {
                return m_cw;
            }

            /**
             * Set orientation of this segment
             * (true: clockwise, false: counter-clockwise)
             */
            void cw(bool cw) {
                m_cw = cw;
            }

        }; // class NodeRefSegment

        /// NodeRefSegments are equal if both their locations are equal
        inline bool operator==(const NodeRefSegment& lhs, const NodeRefSegment& rhs) {
            return lhs.first().location() == rhs.first().location() && lhs.second().location() == rhs.second().location();
        }

        inline bool below(const NodeRefSegment& lhs, const NodeRefSegment& rhs) {
            osmium::Location l = lhs.first().location();
            osmium::Location a = lhs.second().location();
            osmium::Location b = rhs.second().location();

            if (l.x() == a.x()) {
                if (l.x() != b.x()) {
                    return true;
                }
                return a.y() < b.y();
            }
            if (l.x() == b.x()) {
                return false;
            }

            return (a.lat() - l.lat()) / (a.lon() - l.lon()) < (b.lat() - l.lat()) / (b.lon() - l.lon());
        }

        /**
         * NodeRefSegments are "smaller" if they are to the left and down of another
         * segment. The first() location is checked first() and only if they have the
         * same first() location the second() location is taken into account.
         */
        inline bool operator<(const NodeRefSegment& lhs, const NodeRefSegment& rhs) {
            return (lhs.first().location() == rhs.first().location() && below(lhs, rhs)) || lhs.first().location() < rhs.first().location();
        }

        inline std::ostream& operator<<(std::ostream& out, const NodeRefSegment& segment) {
            out << segment.first() << "--" << segment.second();
            return out;
        }

        inline bool outside_x_range(const NodeRefSegment& s1, const NodeRefSegment& s2) {
            if (s1.first().location().x() > s2.second().location().x()) {
                return true;
            }
            return false;
        }

        inline bool y_range_overlap(const NodeRefSegment& s1, const NodeRefSegment& s2) {
            auto m1 = std::minmax(s1.first().location().y(), s1.second().location().y());
            auto m2 = std::minmax(s2.first().location().y(), s2.second().location().y());
            if (m1.first > m2.second || m2.first > m1.second) {
                return false;
            }
            return true;
        }

        /**
         * Calculate the intersection between to NodeRefSegments. The result is returned
         * as a Location. Note that because the Location uses integers with limited
         * precision internally, the result might be slightly different than the
         * numerically correct location.
         *
         * If the segments touch in one of their endpoints, it doesn't count as an
         * intersection.
         *
         * If the segments intersect not in a single point but in multiple points, ie
         * if they overlap, this is NOT detected.
         *
         * @returns Undefined osmium::Location if there is no intersection or a defined
         *          Location if the segments intersect.
         */
        inline osmium::Location calculate_intersection(const NodeRefSegment& s1, const NodeRefSegment& s2) {
            if (s1.first().location()  == s2.first().location()  ||
                s1.first().location()  == s2.second().location() ||
                s1.second().location() == s2.first().location()  ||
                s1.second().location() == s2.second().location()) {
                return osmium::Location();
            }

            double denom = ((s2.second().lat() - s2.first().lat())*(s1.second().lon() - s1.first().lon())) -
                           ((s2.second().lon() - s2.first().lon())*(s1.second().lat() - s1.first().lat()));

            if (denom != 0) {
                double nume_a = ((s2.second().lon() - s2.first().lon())*(s1.first().lat() - s2.first().lat())) -
                                ((s2.second().lat() - s2.first().lat())*(s1.first().lon() - s2.first().lon()));

                double nume_b = ((s1.second().lon() - s1.first().lon())*(s1.first().lat() - s2.first().lat())) -
                                ((s1.second().lat() - s1.first().lat())*(s1.first().lon() - s2.first().lon()));

                if ((denom > 0 && nume_a >= 0 && nume_a <= denom && nume_b >= 0 && nume_b <= denom) ||
                    (denom < 0 && nume_a <= 0 && nume_a >= denom && nume_b <= 0 && nume_b >= denom)) {
                    double ua = nume_a / denom;
                    double ix = s1.first().lon() + ua*(s1.second().lon() - s1.first().lon());
                    double iy = s1.first().lat() + ua*(s1.second().lat() - s1.first().lat());
                    return osmium::Location(ix, iy);
                }
            }

            return osmium::Location();
        }

    } // namespace area

} // namespace osmium

#endif // OSMIUM_AREA_SEGMENT
